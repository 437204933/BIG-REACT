(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	// 是否支持Symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// React Element
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'LvYongJian'
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // key 赋值
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        // ref 赋值
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 自身的prop赋值
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	        // 判断children长度
	        const maybeChildrenLength = maybeChildren.length;
	        if (maybeChildrenLength) {
	            // [children] 一个或者多个
	            if (maybeChildrenLength === 1) {
	                props.children = maybeChildren[0];
	            }
	            else {
	                props.children = maybeChildren;
	            }
	        }
	        return ReactElement(type, key, ref, props);
	    }
	};
	// 暂时一致
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // key 赋值
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        // ref 赋值
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 自身的prop赋值
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	        return ReactElement(type, key, ref, props);
	    }
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
